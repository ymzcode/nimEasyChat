<template>
	<view class="im-flex-column im-flex-1 im-bg-grey-1">
		<!-- 顶部导航栏 -->
		<nim-chat-navigation>
			<view class="im-flex-column">
				<text class="im-font-34 im-font-black im-text-ellipsis" style="max-width: 400rpx">{{ pageTitle }}</text>
			</view>
			<view slot="right" class="im-flex" @tap="clickMore">
				<image src="/static/easy-chat/chat/more.png" mode="aspectFill" style="width: 40rpx;height: 40rpx;"></image>
			</view>
		</nim-chat-navigation>
		<!-- 聊天滚动区域 -->
		<nim-scroll-view :scene="scene" :to="to" :focus="inputFocus" @clickScrollView="clickScrollView"></nim-scroll-view>
		<!-- 底部聊天框 -->
		<view class="im-flex im-align-center im-justify-between im-bg-grey-1 im-px-2 im-py-2 im-border-top" style="min-height: 85rpx;max-height: 150rpx">
			<image @tap="changeMode" :src="modeIcon" mode="aspectFill" class="im-icon-5"></image>
			<textarea
				v-if="mode === 'input'"
				class="im-flex im-bg-white im-round-3 im-px-2 im-py-2 im-font-28"
				style="min-height: 70rpx;width: 470rpx;max-height: 120rpx"
				:auto-height="true"
				:cursor-spacing="10"
				confirm-type="send"
				:maxlength="200"
				:focus="inputFocus"
				:show-confirm-bar="false"
				:hold-keyboard="false"
				:value="textareaValue"
				@focus="textareaFocus"
				@keyboardheightchange="keyboardheightchange"
				@input="textareaInput"
			/>
			<nim-chat-recording v-if="mode === 'audio'" style="height: 70rpx;width: 480rpx;"></nim-chat-recording>
			<image src="/static/easy-chat/chat/emojo@2x.png" mode="aspectFill" class="im-icon-5" @tap="openEmoji"></image>
			<image v-if="textareaValue.length === 0" src="/static/easy-chat/chat/add@2x.png" mode="aspectFill" class="im-icon-5" @tap="opemMenu"></image>
			<view v-if="textareaValue.length > 0" hover-class="im-bg-grey-3" class="im-bg-blue-2 im-px-2 im-py-2 im-round-1" @tap="sendMsg"><text class="im-font-28 im-font-white">发送</text></view>
		</view>

		<!-- 扩展菜单 -->
		<nim-chat-extend-menu :type="menuType" :show="menuShow" :sendOk="textareaValue.length > 0" @deleteInput="deleteInput" @sendMsg="sendMsg" @addEmoji="addEmoji"></nim-chat-extend-menu>
	</view>
</template>

<script>
import nimScrollView from '@/components/easy-chat/nim-scroll-view.vue';
import nimChatExtendMenu from '@/components/easy-chat/nim-chat-extend-menu.vue'
import nimChatRecording from '@/components/easy-chat/nim-chat-recording.vue'
import nimChatNavigation from '@/components/easy-chat/nim-chat-navigation.vue'

export default {
	data() {
		return {
			// textarea相关
			textareaValue: '',
			inputFocus: false,

			// nim相关数据
			scene: '',
			to: '',
			
			// 菜单相关数据
			menuShow: false,
			// 展示menu的类型，
			menuType: '',
			
			//输入模式 input 打字 audio 语音
			mode: 'input'
		};
	},
	components: {
		nimScrollView,
		nimChatExtendMenu,
		nimChatRecording,
		nimChatNavigation
	},
	computed: {
		modeIcon() {
			if (this.mode === 'input') {
				return '/static/easy-chat/chat/voice@2x.png'
			} else {
				return '/static/easy-chat/chat/wenzishuru@2x.png'
			}
		},
		teamObj() {
			return this.$store.getters['initNim/teamObj']
		},
		userObj() {
			return this.$store.getters['initNim/userObj']
		},
		// 设置标题
		pageTitle() {
			let title = '聊天页面'
			
			if (this.scene === 'team' && this.teamObj && this.teamObj[this.to]) {
				title = this.teamObj[this.to].name
			} else if (this.scene === 'p2p' && this.userObj && this.userObj[this.to]) {
				title = this.userObj[this.to].nick
			}
			
			return title
		},
	},
	watch: {},
	onLoad(event) {
		console.log('页面接受的参数', event);

		if (event.sessionId) {
			this.$store.dispatch('initNim/setCurrentSessionId', event.sessionId);
			this.scene = event.sessionId.split('-')[0];
			this.to = event.sessionId.split('-')[1];
		}
		
	},
	onUnload() {
		this.$store.dispatch('initNim/resetCurrentSession')
	},
	onHide() {
		console.log('页面隐藏');
	},
	methods: {
		// 前往设置页面
		clickMore() {
			console.log('设置页面');
		},
		// 点击表情扩展中的表情
		addEmoji(emoji) {
			this.textareaValue += emoji
		},
		// 点击表情扩展中的删除
		deleteInput() {
			let lastText = this.textareaValue.slice(-1)
			if (lastText === ']') {
				let left = this.textareaValue.lastIndexOf('[')
				if (left > -1) {
					this.textareaValue = this.textareaValue.slice(0, left)
					return ;
				}
			}
			this.textareaValue = this.textareaValue.slice(0, -1)
		},
		// 切换模式
		changeMode() {
			this.mode === 'input' ? this.mode = 'audio' : this.mode = 'input'
			if (this.mode === 'audio') {
				this.clickScrollView()
			}
		},
		// 打开扩展菜单
		opemMenu() {
			this.menuType = 'extend'
			if (!this.menuShow) {
				this.clickScrollView()
				this.$nextTick(() => {
					this.menuShow = true
				})
			}
		},
		// 打开表情菜单
		openEmoji() {
			this.menuType = 'emoji'
			this.mode = 'input'
			if (!this.menuShow) {
				this.clickScrollView()
				this.$nextTick(() => {
					this.menuShow = true
				})
			}
		},
		// 点击滚动区域， 取消聚焦 初始化页面状态
		clickScrollView() {
			console.log('点击滚动区域');
			this.hideKeyWord()
			this.$nextTick(() => {
				this.inputFocus = false;
				if (this.menuShow) {
					this.menuShow = false;
					this.menuType = ''
				}
			})
			
		},
		// 收起键盘
		hideKeyWord() {
			uni.hideKeyboard()
		},
		// 输入框写入内容
		textareaInput(e) {
			console.log(e);
			this.textareaValue = e.detail.value;
		},
		keyboardheightchange(e) {
			console.log(e);
			if (e.detail.height > 0) {
				this.$nextTick(() => {
					this.inputFocus = true;
				})
			}
		},
		textareaFocus(e) {
			console.log(e);
			this.menuShow = false;
		},
		sendMsg() {
			console.log('msg', this.textareaValue);
			if (!this.textareaValue) {
				uni.showToast({
					title: '发送内容不能为空',
					icon: 'none'
				})
				return ;
			}
			
			this.$store
				.dispatch('initNim/nimSendMsg', {
					scene: this.scene,
					to: this.to,
					text: this.textareaValue
				})
				.then(res => {
					this.textareaValue = '';
				})
				.catch(err => {
					console.error('error', err);
				});
		}
	}
};
</script>

<style scoped></style>
